########################
## Basic parameters

## Sample information file with five columns: id / name / group / fq1 / fq2
src_sampleInfo	= "./sample.tsv"
cluster_yml		= os.environ["CHIP_PATH"] + "/Snakemake.ChIP_PE/cluster.yml"

## Genome folder depending on platform: CCHMC:HPC vs my desktop
## Mouse
'''
genomeFa	= "/data/limlab/Resource/GenomeData/mm/mm10/Genome/genome.fa"
chrom_size	= "/data/limlab/Resource/GenomeData/mm/mm10/Genome/chrom.size"
peak_mask	= "/data/limlab/Resource/GenomeData/mm/mm10/ENCODE-blacklist.bed"
genome		= "mm10"
star_index	= "/data/limlab/Resource/STAR_Index/2.7.4/mm10_allChr_vM20"
'''
## Human
genomeFa	= "/data/limlab/Resource/GenomeData/hg/hg38/Genome/genome.fa"
chrom_size	= "/data/limlab/Resource/GenomeData/hg/hg38/Genome/chrom.size"
peak_mask	= "/data/limlab/Resource/GenomeData/hg/hg38/ENCODE-blacklist.bed"
genome		= "hg38"
star_index	= "/Volumes/limlab/Resource/STAR_Index/2.7.4/hg38_allChr_v29"


## Other STAR Index. Beware of STAR version
# hg38 + Dm6
#star_index	= "/data/limlab/Resource/STAR_Index/hg38_allChr_v29_plusDm6"


#### Spikein-related files
## spikein chromosome size file for bigwig file generation (and potentially something else) in spikein genome
spikein_chrom_size = "/data/limlab/Resource/GenomeData/dm/dm6/Genome/chrom.size"


## Other essential pameters
adapter			= "AGATCGGAAGAGC"	# illumina universal adapter
#adapter			= "CTGTCTCTTATA"	# Nextera adapter for ATAC-seq or Cut&Tag
#trim_maxLen=100	## Maximum read length after trimming. ** NOT YET IMPLEMENTED **
trim_minLen		= 20
trim_minQual	= 20
chrRegexAll		= "^chr[0-9XY]+$|^dm-chr[0-9XYLR]+$"
chrRegexTarget	= "^chr[0-9XY]+$"
spikePrefix		= "dm-"

########################
## STAR index & options
star_module="STAR/2.7.4"
## ChIP-seq / ATAC-seq / Cut&Run
star_option	= "--alignSJDBoverhangMin 999 --alignIntronMax 1 --alignMatesGapMax 2000 --outFilterMultimapNmax 1 --outFilterMismatchNoverLmax 0.05 --outReadsUnmapped None"
## Note:
## Additoinal star_option to prevent soft-clipping: "--alignEndsType EndToEnd"
## BAM sort by "--outSAMtype" is handled by the star.align.sh by -s option.
## To keep unmapped reads in the output bam file, add "--outSAMunmapped Within"

#########################
## Job flags
doTrim		= False
doDedup		= True

########################
## Other parameteres
## Homer "tbp" option, number of read per position to consider
## If 0, all the reads are considered.
## If deduplication is done, 0 is strongly recommended.
Homer_tbp=0

#########################
## Directories
fastqDir	= "0.Fastq"
trimDir		= "0.Fastq.Trim"
alignDir	= "1.1.Align"
filteredDir	= "1.2.Align.filtered"
dedupDir	= "1.3.Align.dedup"
qcDir		= "2.QualityControl"
sampleDir	= "3.Samples"


'''
## not used since conversion to newer sample-by-sample structure
fragDir		= "1.4.Frag"
fragDir_ctr	= "1.4.Frag.ctr"
baseFreqDir = filteredDir + "/BaseFreq"
fragLenDir	= fragDir + "/fragLenHist"
spikeinCntDir = fragDir + "/spikeinCnt"
bigWigDir_ctr_RPM	= "2.1.1.BigWig.ctr.RPM"
bigWigDir_ctr_RPM_sub	= "2.1.2.BigWig.ctr.RPM.subInput"
bigWigDir_ctr_RPM_div	= "2.1.3.BigWig.ctr.RPM.divInput"

bigWigDir_frag_RPM	= "2.2.1.BigWig.frag.RPM"
bigWigDir_frag_RPM_sub	= "2.2.2.BigWig.frag.RPM.subInput"
bigWigDir_frag_RPM_div	= "2.2.3.BigWig.frag.RPM.divInput"


bigWigDir_ctr_RPSM	= "2.3.1.BigWig.ctr.RPSM"
bigWigDir_ctr_RPSM_sub	= "2.3.2.BigWig.ctr.RPSM.subInput"
bigWigDir_ctr_RPSM_div	= "2.3.3.BigWig.ctr.RPSM.divInput"

bigWigDir_frag_RPSM	= "2.4.1.BigWig.frag.RPSM"
bigWigDir_frag_RPSM_sub	= "2.4.2.BigWig.frag.RPSM.subInput"
bigWigDir_frag_RPSM_div	= "2.4.3.BigWig.frag.RPSM.divInput"
'''


###################################################
## Hetero-chromatin domain calling: naive slide window version
peakDir 	= "PeakCall"
peakWindow 	= 2000
peakStep	= 1000
peakFC		= 2
peakAlpha	= 1
peakSuffix	= "w%d.s%d.fc%.1f" % ( peakWindow, peakStep, peakFC )

#############################################
## hetChr peak by Homer
peakFC_homer	= 2
peakWindow_homer = 2000
minDist_homer	= 4000
## hetChr peak directory with "raw fragment"
hetChr_homer_spike 	= "hetChr.Homer.spikein.w%d_d%d_fc%.1f" % ( peakWindow_homer, minDist_homer, peakFC )
## hetChr peak directory with "resized ctr fragment"
hetChr_homer_spike_ctr = "hetChr.Homer.spikein.ctr.w%d_d%d_fc%.1f" % ( peakWindow_homer, minDist_homer, peakFC )



###################################################






## CODE used in the initial version
#def getfq(wildcards):
#	return "0.Fastq/" + samples_indexById.loc[wildcards.sampleId, ["Fq1","Fq2"]]
#
#def getfq_trim(wildcards):
#	sampleId = samples_indexByName.loc[wildcards.sampleName, ["Id"]]
#	return [ "0.Fastq/Trim/" + sampleId + "_1.trim.fq.gz", "0.Fastq/Trim/" + sampleId + "_2.trim.fq.gz" ]

################################
## Loading sample Information
import pandas as pd
import sys
samples = pd.read_csv(src_sampleInfo, sep="\t", comment="#", na_filter=False)
if not samples.Id.is_unique:
	print( "Error: Id column in sample.tsv is not unique")
	sys.exit()
if not samples.Name.is_unique:
	print( "Error: Name column in sample.tsv is not unique")
	sys.exit()

#################################
## Cluster configuration file
import yaml
with open(os.path.expanduser(cluster_yml), 'r') as fh:
	cluster = yaml.safe_load(fh)


sampleNameTarget=samples.Name[samples.Ctrl != "NULL"].tolist()
rule all:
	input:
#		alignDir + "/alignStat.txt",
		qcDir + "/spikein.txt"
#		expand(sampleDir + "/{sampleName}/QC/fragLen.png", sampleName=samples.Name.tolist()),
#		expand(sampleDir + "/{sampleName}/igv.ctr.rpm.bw", sampleName=samples.Name.tolist()),
#		expand(sampleDir + "/{sampleName}/igv.ctr.rpsm.bw", sampleName=samples.Name.tolist()),
#		expand(sampleDir + "/{sampleName}/igv.frag.rpm.bw", sampleName=samples.Name.tolist()),
#		expand(sampleDir + "/{sampleName}/igv.frag.rpsm.bw", sampleName=samples.Name.tolist()),
#		expand(sampleDir + "/{sampleName}/igv.ctr.rpm.subInput.bw", sampleName=samples.Name.tolist()),
#		expand(sampleDir + "/{sampleName}/igv.ctr.rpsm.subInput.bw", sampleName=samples.Name.tolist()),
#		expand(sampleDir + "/{sampleName}/igv.frag.rpm.subInput.bw", sampleName=samples.Name.tolist()),
#		expand(sampleDir + "/{sampleName}/igv.frag.rpsm.subInput.bw", sampleName=samples.Name.tolist()),
#		expand(hetChr_homer_spike + "/{sampleName}.exBL.bed", sampleName=sampleNameTarget),
#		expand(hetChr_homer_spike_ctr + "/{sampleName}.exBL.bed", sampleName=sampleNameTarget)

include: os.environ["CHIP_PATH"] + "/Snakemake.PE/rules.pre.smk"
include: os.environ["CHIP_PATH"] + "/Snakemake.PE/rules.post.smk"
