########################
## Basic parameters

## Sample information file with five columns: Id / Name / Group / Fq1 / Fq2 / Ctrl / PeakMode
src_sampleInfo	= "../sample.tsv"
cluster_yml		= "~/bin/Pipeline/Snakemake.pool/cluster.yml"

## Name / PeakMode / Ctrl columns for group analysis mimicking sample.tsv file
## i.e. Name correspond to the Group column in sample.tsv
src_groupInfo	= "group.tsv"

## Genome folder depending on platform: CCHMC:HPC vs my desktop
import socket
hostname = socket.gethostname()	
if( hostname == "EA19-00359" ):
	# my desktop
	genomeFa	= "/Users/limc8h/Research/Common_Data/hg38/genome/genome.fa"
	chrom_size	= "/Users/limc8h/Research/Common_Data/hg38/chrom.sizes"
	peak_mask	= "/Users/limc8h/Research/Common_Data/hg38/ENCODE-blacklist.bed"
	baseDir		= "/Volumes"
else:
	# cluster system
	genomeFa	= "/data/limlab/Resource/GenomeData/hg/hg38/Genome/genome.fa"
	chrom_size	= "/data/limlab/Resource/GenomeData/hg/hg38/Genome/chrom.size"
	peak_mask	= "/data/limlab/Resource/GenomeData/hg/hg38/hg38-blacklist.v2.bed"
	baseDir		= "/data"

## Other essential pameters
#genome			= "hg38"

chrRegexAll		= "^chr[0-9XY]+$|^dm-chr[0-9XYLR]+$"
chrRegexTarget	= "^chr[0-9XY]+$"
spikePrefix		= "dm-"


#########################
## Directories

## intact fragments replicates & pool
frag_rep	= "../1.4.Align.allFrag0"
frag_pool= "1.4.Align.allFrag0.pool"

## resized fragments replicates & pool
frag_ctr_rep	= "../1.4.Align.allFrag"
frag_ctr_pool= "1.4.Align.allFrag.pool"


## Starting fragment file directory for downstream analysis
fragDir	= frag_pool
fragDir_ctr		= frag_ctr_pool
fragLenDir	= fragDir + "/fragLenHist"

bigWigDir_ctr_RPM	= "2.1.1.BigWig.ctr.RPM"
bigWigDir_ctr_RPM_sub	= "2.1.2.BigWig.ctr.RPM.subInput"
bigWigDir_ctr_RPM_div	= "2.1.3.BigWig.ctr.RPM.divInput"

bigWigDir_frag_RPM	= "2.2.1.BigWig.frag.RPM"
bigWigDir_frag_RPM_sub	= "2.2.2.BigWig.frag.RPM.subInput"
bigWigDir_frag_RPM_div	= "2.2.3.BigWig.frag.RPM.divInput"


bigWigDir_ctr_RPSM	= "2.3.1.BigWig.ctr.RPSM"
bigWigDir_ctr_RPSM_sub	= "2.3.2.BigWig.ctr.RPSM.subInput"
bigWigDir_ctr_RPSM_div	= "2.3.3.BigWig.ctr.RPSM.divInput"

bigWigDir_frag_RPSM	= "2.4.1.BigWig.frag.RPSM"
bigWigDir_frag_RPSM_sub	= "2.4.2.BigWig.frag.RPSM.subInput"
bigWigDir_frag_RPSM_div	= "2.4.3.BigWig.frag.RPSM.divInput"


homerDir	= "4.Homer"

spikeinCntDir = "1.5.Spikein"

## Hetero-chromatin domain calling
peakDir 	= "PeakCall"
peakWindow 	= 2000
peakStep	= 1000
peakFC		= 2
peakAlpha	= 1
peakSuffix	= "w%d.s%d.fc%.1f" % ( peakWindow, peakStep, peakFC )

## Homer findPeaks
peakDir_homer 	= "PeakCall.Homer"
peakWindow_homer	= 1000
minDist_homer	= 2000
peakFC_homer	= 2
peakSuffix_homer	= "w%d.d%d.fc%.1f" % ( peakWindow_homer, minDist_homer, peakFC_homer )

################################




################################
## Loading sample Information
import pandas as pd
import sys
sampleAll = pd.read_csv(src_sampleInfo, sep="\t", comment="#", na_filter=False)
if not sampleAll.Id.is_unique:
	print( "Error: Id column in sample.tsv is not unique")
	sys.exit()
if not sampleAll.Name.is_unique:
	print( "Error: Name column in sample.tsv is not unique")
	sys.exit()

samples = pd.read_csv(src_groupInfo, sep="\t", comment="#", na_filter=False)
if not samples.Name.is_unique:
	print( "Error: Id column in sample.tsv is not unique")
	sys.exit()

#################################
## Cluster configuration file
import yaml
with open(os.path.expanduser(cluster_yml), 'r') as fh:
	cluster = yaml.load(fh)





#########################
## Rules start
rule all:
	input:
		spikeinCntDir + "/spikein.txt",
		expand(bigWigDir_ctr_RPM + "/{sampleName}.ctr.rpm.bw", sampleName=samples.Name.tolist()),
		expand(bigWigDir_frag_RPM + "/{sampleName}.frag.rpm.bw", sampleName=samples.Name.tolist()),
		expand(bigWigDir_ctr_RPSM + "/{sampleName}.ctr.rpsm.bw", sampleName=samples.Name.tolist()),
		expand(bigWigDir_frag_RPSM + "/{sampleName}.frag.rpsm.bw", sampleName=samples.Name.tolist()),

		expand(bigWigDir_ctr_RPM_sub + "/{sampleName}.ctr.rpm.subInput.bw", sampleName=samples.Name[samples.Ctrl != "NULL"].tolist()),
		expand(bigWigDir_frag_RPM_sub + "/{sampleName}.frag.rpm.subInput.bw", sampleName=samples.Name[samples.Ctrl != "NULL"].tolist()),
		expand(bigWigDir_ctr_RPSM_sub + "/{sampleName}.ctr.rpsm.subInput.bw", sampleName=samples.Name[samples.Ctrl != "NULL"].tolist()),
		expand(bigWigDir_frag_RPSM_sub + "/{sampleName}.frag.rpsm.subInput.bw", sampleName=samples.Name[samples.Ctrl != "NULL"].tolist())

#		expand(peakDir + "/{sampleName}.{suffix}.{ext}", sampleName=samples.Name[samples.Ctrl != "NULL"].tolist(), suffix=peakSuffix, ext=["bed","txt.gz"]),
#		expand(peakDir_homer + "/{sampleName}.{suffix}.exBL.bed", sampleName=samples.Name[samples.Ctrl != "NULL"].tolist(), suffix=peakSuffix_homer),

		## homer tag dir
		#expand(homerDir + "/{sampleName}/TSV.{fragment}", sampleName=samples.Name.tolist(), fragment=["nfr","nuc"])


include: os.environ["MY_SCRIPT_BASE"] + "/Pipeline/Snakemake/rules.post.smk"
include: os.environ["MY_SCRIPT_BASE"] + "/Pipeline/Snakemake.pool/rules.smk"
